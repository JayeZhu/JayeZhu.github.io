(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{458:function(a,t,s){"use strict";s.r(t);var n=s(15),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),s("p",[a._v("JS 已经有了赋值操作，为什么还需要深浅拷贝来完成值的赋值呢？因为赋值操作有很多的限制")]),a._v(" "),s("h2",{attrs:{id:"赋值操作缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赋值操作缺陷"}},[a._v("#")]),a._v(" 赋值操作缺陷")]),a._v(" "),s("p",[a._v("从内存空间知识中，我们认识到引用数据类型存放在栈中，它的引用地址存放在栈中。当将引用数据类型进行赋值操作时，赋值的起始是存放在栈中的引用地址，这个时候，就会存在赋值操作缺陷。")]),a._v(" "),s("p",[a._v("举个例子")]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("这里变量 a 赋值给 b，起始赋值的是对象 "),s("code",[a._v("{ value: 1 }")]),a._v(" 的地址，那么 a 和 b 都指向了这个对象，当改变 b 的 value 属性时，该变量存放在堆中该对象的 value 值。而 a 指向了这个对象，导致 a 的 value 产生变化。")]),a._v(" "),s("p",[a._v("其实质就是引用数据类型进行赋值操作时赋值的是对象地址，相关的变量一起指向这个对象，有一个变量更改这个变量，所有变量都会发生改变。")]),a._v(" "),s("h2",{attrs:{id:"深浅拷贝的意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深浅拷贝的意义"}},[a._v("#")]),a._v(" 深浅拷贝的意义")]),a._v(" "),s("p",[a._v("深浅拷贝就是解决上述的问题的，所以深浅拷贝都是针对的 Object 或 Array 这样的引用数据的。它是怎么解决问题的呢？")]),a._v(" "),s("p",[a._v("很简单粗暴，深浅拷贝会生成新的对象，这个对象是原对象的拷贝品，只不过浅拷贝是外在拷贝，而深拷贝是完全拷贝。在后续操作原对象时，就会转为操作原对象的拷贝品，比如赋值的时候就会是拷贝品的地址，而不是原对象的地址。这样，通过深浅拷贝就会消减或消除对象原对象的影响。")])])}),[],!1,null,null,null);t.default=e.exports}}]);